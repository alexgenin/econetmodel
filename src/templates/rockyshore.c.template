#include <R.h>
#include <exports.h>
#include <math.h> // for fmax, round
#include <float.h> // for float limits

#define min_step_btw_root 5
#define remaining_eq_value  2.0 // max number of eqs to consider

// We use a tolerance here as will be a double
#define is_non_zero(a) ( (a) <= 1e-5 ? 0.0 : 1.0 )

/* The template processing in R will produce two #define macros here for : 
 *   - Nsp : the number of species (equal to *neq in the solver function)
 *   - Np  : the number of parameters 
 */
// [[template::defines]]

// Print debug messages ?
// static double eq_zerotol = 1e-30; // max derivs value to consider eq
static double zerotol = 1e-5;    // min abundance of a species
int steps_since_root;  // min number of evaluations to consider 
                       // btw two equilibrium

// Note: C STORES ARRAYS IN ROW-MAJOR ORDER !!!

/* We pass all our parameters as a big array of doubles. For convenience we 
 * define here a union/struct that allows referring to them as p.<name> so 
 * the code is much more readable. 
 * 
 * Same thing here, the tag will be replaced by the actual values of the 
 * parameters.
 */
union parms { 
  struct {  
    // [[template::declarations]]
  };
  double value[Np];
} p; // instance (name to be referred to)

/* We want to be able to determine if the system is at equlibrium to perform
 * an action. To do this we need to have a globally available copy of the 
 * derivatives. 
 * This line defines this array.
 */
double ydot_global[Nsp];

/* We store an array containing the extant species as a global variable: this
 * array is looped over to determine which species are interacting with each
 * other */
int extant_species[Nsp];
int extant_n;

/* Same thing here, we need to have the parameters globally available. This 
 * function (provided by deSolve) takes care of this.
 * 
 * We also reset the global values.
 */
void initmod(void (* odeparms)(int *, double *)) {
  // Reset global values
  steps_since_root = min_step_btw_root;
  
  // initialize species statuses
  extant_n = Nsp;
  for (int i=0; i<Nsp; i++) {
    extant_species[i] = i;
  }
  
  // non-zero the derivatives on start so there is no equilibrium detected
  // on step 1
  memset(ydot_global, 1, sizeof(ydot_global)); 
  
  // Copy params values into correct array
  int N=Np;
  odeparms(&N, p.value); 
}

/* We define here an event that will happen at a time specified in R */
void remove_species(int *n, double *t, double *y) { 
  // Modifies the system's state in place !
  
  // Note the -1 to adjust for R indexing and the lrint to cast 
  // p.removed_species values to an integer.
  // We use a long integer because there is no double -> int rounding function,
  // but it seems to work the same as far as indexing is concerned.
  
  for (int i=0; i < Nsp; i++) { 
    // We encode the removal status with 0/1 as doubles
    if (p.removed_species[i] > .5) { 
      // Rprintf("Removing %i (total:%i)\n", which_species+1, N_remove);
      y[i] = 0.0; // OMG dead stuff
    }
  }
  
}




/* This is the core function of the model that returns the 
 * partial derivatives */
void derivs(int *neq,     // neq is the number of equations 
            double *t,    // value of the independent variable (time)
            double *y,    // current state
            double *ydot, // will contain the derivatives
            double *yout, // vector with [nout values of other output variables] 
                          // ++ [rpar values]
            int *ip)      // [number of output vals, 
                          //  length of yout,
                          //  length of *ip]
{ 
  
  // Default values for ydot is 0 
  memset(ydot, 0, sizeof(*ydot) * Nsp);
  
  // Get species still in the system and initialize
  int extant_n=0;
  for (int i=0; i<Nsp; i++) { 
    if ( y[i] > zerotol ) { 
      extant_species[extant_n] = i;
      extant_n++;
    }
  }
  
  // TODO: so far non-trophic interactions are turned off
  // Adjust all parameters with their non-trophic modifiers
  double K[Nsp];
  nti_ratfun_vec(Nsp, extant_species, extant_n, K, y, p.yt, p.K, p.dK);
  double atk[Nsp][Nsp];
  nti_ratfun_mat(Nsp, extant_species, extant_n, atk, y, p.yt, p.atk, p.datk);
  
//   Rprintf("atk[7][6]: %e (was: %e, modif:%e) \n", atk[6][5], p.atk[6][5], p.datk[4][6][5]);
//   Rprintf("K[1]: %e (was: %e, modif:%e) \n", K[1], p.K[1], p.dK[1]);
  
  // Fill functional responses 2D array. 
  double F[Nsp][Nsp];
  frhill(Nsp, extant_species, extant_n, F, y, atk, p.h, p.q[0]);
  
  /* Main pop dynamics loop */
  for (int sp=0; sp<extant_n; sp++) { 
    // Focus species is i so it follows the formulae 
    int i = extant_species[sp];
      
      /* Logistic growth
       * -------------------- */
      
      ydot[i] = p.r[i] * y[i] * ( 1 - y[i] / K[i] );
      
      /* Trophic interactions
       * -------------------- */
      
      for (int sp2=0; sp2<extant_n; sp2++) {
        int j = extant_species[sp2];
        
        // Species i eats j
        ydot[i] += y[i] * F[i][j];
          
        // Species i gets eaten by j
        ydot[i] += - y[j] * F[j][i] / p.e[j][i];
        
        /* Species i competes with species j 
        * ---------------------------------- */
        ydot[i] += - p.c[j][i] * y[j];
      }
      
      
      /* Mortality 
       * --------- */
      ydot[i] += - p.x[i] * y[i];
      
      
  } // -- end of loop on extant species 
  
  // NB: there is no need to return anything: all the stuff is modified in place
}
